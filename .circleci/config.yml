version: 2
jobs:
  build:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - run:
         name: Install essentials (git/node)
         command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get -y install git
            apt-get -y install curl software-properties-common
            curl -sL https://deb.nodesource.com/setup_10.x | bash -
            apt-get -y install nodejs
            apt-get -y install wget
      - checkout
      - setup_remote_docker
      - run:
          name: Tag image
          command: |
             if [ "${CIRCLE_BRANCH}" == "master" ]
             then
               echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
               gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
               gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
               gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
             fi
             set -x
             DOCKER_IMAGE_TAG=v${CIRCLE_BUILD_NUM}
             echo "${DOCKER_IMAGE_TAG}" > docker_image_version
             echo "nodejs:$DOCKER_IMAGE_TAG" > full_docker_image_name
      - run:
          name: Build image
          command: |
             FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
             docker build -t $FULL_DOCKER_IMAGE_NAME .
      - run:
          name: Push image
          command: |
             if [ "${CIRCLE_BRANCH}" == "master" ]
             then
               FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
               echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
               gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
               gcloud --quiet auth configure-docker
               docker tag $FULL_DOCKER_IMAGE_NAME gcr.io/$GOOGLE_PROJECT_ID_prod/$FULL_DOCKER_IMAGE_NAME
               docker push gcr.io/$GOOGLE_PROJECT_ID_prod/$FULL_DOCKER_IMAGE_NAME
             fi
      - persist_to_workspace:
         root: .
         paths:
           - docker_image_version
           - full_docker_image_name
  deploy_to_prod:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Deploy to prod
          command: |
            echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
            gcloud --quiet auth configure-docker
            gcloud container clusters get-credentials $GOOGLE_CLUSTER_prod --region $GOOGLE_COMPUTE_ZONE_prod --project $GOOGLE_PROJECT_ID_prod
            #kubectl delete deployment my-nodejs-application --ignore-not-found=true
            DOCKER_IMAGE_TAG=$(cat workspace/docker_image_version)
            FULL_DOCKER_IMAGE_NAME=$(cat workspace/full_docker_image_name)
            DEV_KUBE_CONFIG=$(cat deploy/kube-deploy-prod.yml | sed "s|DOCKER_IMAGE_NAME|$FULL_DOCKER_IMAGE_NAME|g" | sed "s|GOOGLE_PROJECT_ID|$GOOGLE_PROJECT_ID_prod|g" | sed "s|DOCKER_IMAGE_TAG|$DOCKER_IMAGE_TAG|g")
            echo "$DEV_KUBE_CONFIG" | kubectl apply -f -
  delete_old_pod:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Delete Old Pod
          command: |
            echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
            gcloud --quiet auth configure-docker
            gcloud container clusters get-credentials $GOOGLE_CLUSTER_prod --region $GOOGLE_COMPUTE_ZONE_prod --project $GOOGLE_PROJECT_ID_prod
            #kubectl delete deployment my-nodejs-application --ignore-not-found=true
  configure_node_port:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Configure NodePort
          command: |
            echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
            gcloud --quiet auth configure-docker
            gcloud container clusters get-credentials $GOOGLE_CLUSTER_prod --region $GOOGLE_COMPUTE_ZONE_prod --project $GOOGLE_PROJECT_ID_prod
            DOCKER_IMAGE_TAG=$(cat workspace/docker_image_version)
            DEV_KUBE_CONFIG=$(cat deploy/kube-assign-nodeport.yml | sed "s|DOCKER_IMAGE_TAG|$DOCKER_IMAGE_TAG|g")
            echo "$DEV_KUBE_CONFIG" | kubectl apply -f -
  configure_load_balancer:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Configure LoadBalancer
          command: |
            echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
            gcloud --quiet auth configure-docker
            gcloud container clusters get-credentials $GOOGLE_CLUSTER_prod --region $GOOGLE_COMPUTE_ZONE_prod --project $GOOGLE_PROJECT_ID_prod
            DOCKER_IMAGE_TAG=$(cat workspace/docker_image_version)
            DEV_KUBE_CONFIG=$(cat deploy/kube-assign-load-balancer.yml | sed "s|RESERVED_IP_ADDRESS|$GCLOUD_RESERVED_IP_ADDRESS|g" | sed "s|DOCKER_IMAGE_TAG|$DOCKER_IMAGE_TAG|g")
            echo "$DEV_KUBE_CONFIG" | kubectl apply -f -
  configure_auto_scaling:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Configure Auto-Scaling
          command: |
            echo $GCLOUD_SERVICE_KEY_prod | base64 --decode --ignore-garbage > ${HOME}/app/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/app/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID_prod
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE_prod
            gcloud --quiet auth configure-docker
            gcloud container clusters get-credentials $GOOGLE_CLUSTER_prod --region $GOOGLE_COMPUTE_ZONE_prod --project $GOOGLE_PROJECT_ID_prod
            DOCKER_IMAGE_TAG=$(cat workspace/docker_image_version)
            DEV_KUBE_CONFIG=$(cat deploy/kube-auto-scale.yml | sed "s|DOCKER_IMAGE_TAG|$DOCKER_IMAGE_TAG|g")
            echo "$DEV_KUBE_CONFIG" | kubectl apply -f -
workflows:
  version: 2
  build-approve-deploy:
    jobs:
      - build
      - can_deploy:
          type: approval
          requires:
            - build
      - deploy_to_prod:
          requires:
            - can_deploy
          filters:
            branches:
              only: master
      - verify_deployment:
          type: approval
          requires:
            - deploy_to_prod
      - delete_old_pod:
          requires:
              - verify_deployment
      - configure_auto_scaling:
          requires:
            - delete_old_pod
      - configure_node_port:
          requires:
            - delete_old_pod
      - configure_load_balancer:
          requires:
            - delete_old_pod